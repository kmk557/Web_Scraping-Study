정규표현식을 사용하기 위해서는 re(regular expression) 모듈을 import

    ^           라인의 처음을 매칭
    (re.search('^From:', line) = line.startswith('From:')

    $            라인의 끝을 매칭

    .             임의의 문자를 매칭 (와일드 카드)

    \s          공백 문자를 매칭

    \S         공백이 아닌 문자를 매칭

    *            바로 앞선 문자에 적용되고 0 혹은 그 이상의 앞선 문자와 매칭을 표기함.


    *?          바로 앞선 문자에 적용되고 0 혹은 그 이상의 앞선 문자와 매칭을 탐욕적이지 않은 방식으로 표기함.

    +           바로 앞선 문자에 적용되고 1 혹은 그 이상의 앞선 문자와 매칭을 표기함

    +?          바로 앞선 문자에 적용되고 1 혹은 그 이상의 앞선 문자와 매칭을 탐욕적이지 않은 방식으로 표기함.

    [aeiou]    명세된 집합 문자에 존재하는 단일 문자와 매칭. “a”, “e”, “i”, “o”, “u” 문자만 매칭되는 예제
        ex)
        import re

        x = 'My 2 favorite numbers are 19 and 42'
        y = re.search('[are]+',x)
        print(y)

        ['a', 'r', 'e', 'er', 'are', 'a']
    [a-z0-9]    - 기호로 문자 범위를 명세할 수 있다. 소문자이거나 숫자인 단일 문자만 매칭되는 예제.

    ( )         괄호가 정규표현식에 추가될 때, 매칭을 무시한다. 하지만 findall()을 사용 할 때 전체 문자열보다 매칭된 문자열의 상세한 부속 문자열을 추출할 수 있게 한다.

    * : 앞의 문자가 여러 번 반복될 수 있음을 의미

    + : 앞의 문자가 1번 이상 나타남을 의미

