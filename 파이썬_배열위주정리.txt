[함수]

.append()    기존 배열에 값 추가하기

.find()     원하는 값의 인덱스 값 찾기
    ex)
    data = 'From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008'
    atpos = data.find('@')
    print(atpos)
    # 21

rstrip()    오른쪽부터 정해진 값 삭제 (기본값 공백)
            ex)
                str = "88888888this is string example....wow!!!8888888";
                print str.rstrip('8');

                #88888888this is string example....wow!!!


defaultdict(from collections)
    일반 diconary는 존재하지 않는 키값을 입력하면 에러를 호출
    하지만 defaultdict로 기본값을 설정하면 정해지지 않은 키값을 호출 시
    기본값을 반환
    ex)
    from collections import defaultdict # 콜렉션에서 불러옵니다.
    d = defaultdict(object) # Default dictionary를 생성합니다.
    d = defaultdict(lambda: 0) # Default 값을 0으로 설정합니다.

OrderedDict(from collections)
     dict과 달리, 데이터를 입력한 순서대로 dict을 반환
     순서를 기억하는 사전형(dict)
     파이썬 3.7 부터 표준 딕셔너리 dict 가 삽입 순서를 보존합니다

deque(from collections)
    자료구조 지원
    rotate, reverse 등 linked list 특성 지원
    기존 list 형태의 함수를 모두 지원
    list형태를 지원해주는 함수라 생각하면 됨
        기존 list보다 효율적인 자료구조 제공
        효율적 메모리 구조로 처리 속도 향상
    ex)
    from collections import deque

    deque_list = deque()
    for i in range(5):
        deque_list.append(i)
    print(deque_list)

    deque_list.rotate(2)
    print(deque_list)

    #
    deque([0, 1, 2, 3, 4])
    deque([3, 4, 0, 1, 2])

reversed
    반대로 바꿔주는 함수
    ex)
    a= [0, 1, 2, 3, 4]

    print(a,list(reversed(a)))

    #[0, 1, 2, 3, 4] [4, 3, 2, 1, 0]

Counter (from collections)
    Sequence type(연속적인 자료) 에서 data element(데이터 요소) 를 찾아
    갯수를 dict 형태로 반환

sum
    덧셈함수
    배열의 값을 모두 더한다

reduce 
	계산한 값을 또 변수에 넣어 다음 계	산을 한다.
	ex)
	from functools import reduce
	print(reduce(lambda x, y: x+y. [1,2,3]))

	#계산과정
	1+2 = 3
	3 +3 =6
	print 6

	
	
map
	배열을 넣으면 하나씩 넣어준다
	ex) 
	f = lambda x: x ** 2
	ex = [1, 2, 3]
	print(list(map(f, ex)))
	
	#[1, 4, 9]

split
    문자열을 특정 값에 따라 나누는 것
    기본값 : 공백
    ex)
    example = 'a,b,c'

    print(example.split(","))

    #['a', 'b', 'c']

join
    배열을 문자열로 바꿔주는 것
    ex)
    list = ["a", "b", "c"]
    print(":".join(list))

    #a:b:c

zip
    같은 인덱스끼리 묶어 주는 것
    ex)
    alist = ['a1', 'a2', 'a3']
    blist = ['b1', 'b2', 'b3']

    for a, b in zip(alist, blist):
    	print(a, b)

    #
    a1 b1
    a2 b2
    a3 b3

enumerate
    배열값을 인덱스 값과 함께 묶어 주는 것
    ex)
    alist = ['a1', 'a2', 'a3']
    blist = ['b1', 'b2', 'b3']

    for i, (a, b) in enumerate(zip(alist, blist)):
        print(i, a, b)

    #
    0 a1 b1
    1 a2 b2
    2 a3 b3

[방식?]

"""문자"""
    "" "" 또는 " " 는 엔터를 치면 문자열이 끊기지만
    """ """ 은 엔터를 쳐도 문자열이 끊기지 않는다.
    엔터를 칠 정도로 많은 문자열을 사용할 때 사용
Sequence type (연속적인 유형)
    연속적으로 이루어진 자료형
    ex) 튜플 리스트 range 문자열
Lambda
    간단하게 쓸 수 있는 함수
    ex)
    f = lambda x, y: x + y
    print(f(1, 4))

    #5

asterisk
	*을 사용
	전체를 의미
	unpacking을 쉽게 가능
	    tuple : *
	    dict : **
	데이터를 묶을 수 있음
	ex1)
	def asterisk_test(a, *args):
    print(a, args)
    print(type(args))

    asterisk_test(1,2,3,4,5,6)

    #
	1 (2, 3, 4, 5, 6)
    <class 'tuple'>

    ex2)
    def asterisk_test(a, **kargs):
    print(a, kargs)
    print(type(kargs))

    #
    asterisk_test(1, b=2, c=3, d=4, e=5, f=6)

    1 {'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}
    <class 'dict'>

    unpacking tuple ex)
    def asterisk_test(a, args):
    print(a, *args)
    print(type(args))

    asterisk_test(1, (2,3,4,5,6))

    #
    1 2 3 4 5 6
    <class 'tuple'>

    unpacking dict ex)
    def asterisk_test(a, b, c, d, e=0):
    print(a, b, c, d, e)

    data = {"d":1 , "c":2, "b":3, "e":56}
    asterisk_test(10, **data)

    #
    10 3 2 1 56
    //*data로 하면
    10 d c b e

unpacking
    가공한 데이터를 여러 변수에 집어 넣는  방법
    ex)
    example = 'ㄱ,ㄴ,ㄷ'

    a, b, c = example.split(",")​

    #
    a= "ㄱ"
    b="ㄴ"
    c="ㄷ"

list comprehension
    가로나 중가로등 안에서 계산을 한 번에 하는 방법
    ex)

:   원하는 부분만 뽑아올때
    ex)
    data = 'From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008'
    host = data[0 : 5]
    print(host)
    #From